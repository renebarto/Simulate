/*-------------------------------------------------------------------------
Compiler Generator Coco/R,
Copyright (c) 1990, 2004 Hanspeter Moessenboeck, University of Linz
extended by M. Loeberbauer & A. Woess, Univ. of Linz
ported to C++ by Csaba Balazs, University of Szeged
with improvements by Pat Terry, Rhodes University

This program is free software; you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the
Free Software Foundation; either version 2, or (at your option) any
later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

As an exception, it is allowed to write an extension of Coco/R that is
used as a plugin in non-free software.

If not otherwise stated, any source code generated by Coco/R (other than
Coco/R itself) does not fall under the GNU General Public License.
-------------------------------------------------------------------------*/

#pragma once

#include "Position.h"
#include "Scanner.h"
#include "BitSet.h"

namespace Coco
{

class Node;

class Symbol
{
public:
    enum class TokenKind
    {
        FixedToken = 0,     // e.g. 'a' ('b' | 'c') (structure of literals)
        ClassToken = 1,     // e.g. digit {digit}   (at least one char class)
        LitToken = 2,       // e.g. "while"
        ClassLitToken = 3,  // e.g. letter {letter} but without literals that have the same structure
    };

	Symbol(int typ, std::wstring const & name, size_t line);

    std::wstring const & GetName() const { return name; }
    size_t GetSymbolNumber() const { return n; }
    void SetSymbolNumber(size_t value) { n = value; }
    int GetSymbolType() const { return typ; }
    TokenKind GetTokenKind() const { return tokenKind; }
    void SetTokenKind(TokenKind value) { tokenKind = value; }
    size_t GetLine() const { return line; }
    void SetLine(size_t value) { line = value; }
    Node * GetGraph() const { return graph; }
    void SetGraph(Node const * value) { graph = const_cast<Node *>(value); }
    bool IsDeletable() const { return deletable; }
    void SetDeletable() { deletable = true; }
    bool IsFirstReady() const { return firstReady; }
    void SetFirstReady(bool value) { firstReady = value; }
    BitSet const & GetFirst() const { return first; }
    void SetFirst(BitSet const & value) { first = value; }
    BitSet const & GetFollow() const { return follow; }
    BitSet & GetFollow() { return follow; }
    void SetFollow(BitSet const & value) { follow = value; }
    BitSet const & GetNts() const { return nts; }
    BitSet & GetNts() { return nts; }
    void SetNts(BitSet const & value) { nts = value; }
    Position * GetAttrPos() { return attrPos; }
    void SetAttrPos(Position * value) { attrPos = value; }
    Position *& GetSemPos() { return semPos; }

private:
    size_t          n;          // symbol number
	int             typ;        // t, nt, pr, unknown, rslv /* ML 29_11_2002 slv added */ /* AW slv --> rslv */
	std::wstring    name;       // symbol name
	Node            *graph;     // nt: to first node of syntax graph
	TokenKind       tokenKind;  // t:  token kind (fixedToken, classToken, ...)
	bool            deletable;  // nt: true if nonterminal is deletable
	bool            firstReady; // nt: true if terminal start symbols have already been computed
	BitSet          first;      // nt: terminal start symbols
	BitSet          follow;     // nt: terminal followers
	BitSet          nts;        // nt: nonterminals whose followers have to be added to this sym
	size_t          line;       // source text line number of item in this node
	Position        *attrPos;   // nt: position of attributes in source text (or null)
	Position        *semPos;    // pr: pos of semantic action in source text (or null)
	                            // nt: pos of local declarations in source text (or null)

};

} // namespace Coco
