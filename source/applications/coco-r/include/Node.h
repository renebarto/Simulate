/*-------------------------------------------------------------------------
Compiler Generator Coco/R,
Copyright (c) 1990, 2004 Hanspeter Moessenboeck, University of Linz
extended by M. Loeberbauer & A. Woess, Univ. of Linz
ported to C++ by Csaba Balazs, University of Szeged
with improvements by Pat Terry, Rhodes University

This program is free software; you can redistribute it and/or modify it 
under the terms of the GNU General Public License as published by the 
Free Software Foundation; either version 2, or (at your option) any 
later version.

This program is distributed in the hope that it will be useful, but 
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License 
for more details.

You should have received a copy of the GNU General Public License along 
with this program; if not, write to the Free Software Foundation, Inc., 
59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

As an exception, it is allowed to write an extension of Coco/R that is
used as a plugin in non-free software.

If not otherwise stated, any source code generated by Coco/R (other than 
Coco/R itself) does not fall under the GNU General Public License.
-------------------------------------------------------------------------*/

#pragma once

#include <stdio.h>
#include "BitSet.h"
#include "Position.h"
#include "State.h"
#include "Scanner.h"

namespace Coco
{

class Symbol;

class Node
{
public:
    enum class Kind
    {
        Undefined = 0,
        Terminal = 1,       // terminal symbol
        Pragma = 2,         // pragma
        NonTerminal = 3,    // nonterminal symbol
        _Class = 4,         // character class
        Char = 5,           // character
        WeakTerminal = 6,   // weak terminal symbol
        Any = 7,            //
        Eps = 8,            // empty
        Sync = 9,           // synchronization symbol
        Sem = 10,           // semantic action: (. .)
        Alt = 11,           // alternative: |
        Iter = 12,          // iteration: { }
        Opt = 13,           // option: [ ]
        Resolve = 14,       // resolver expr
    };
    enum class TransCode
    {
        NormalTrans = 0,// transition codes
        ContextTrans = 1,
    };
	

	Node(Kind typ, Node * sub, Symbol *sym, wchar_t val, size_t line);
    size_t GetID() const { return id; }
    void SetID(size_t value) { id = value; }
    Kind GetKind() const { return typ; }
    const Position & GetPosition() const { return pos; }
    void SetPosition(const Position & value) { pos = value; }
    Node * GetNext() const { return next; }
    void SetNext(Node * value) { next = value; }
    Node * GetDown() const { return down; }
    void SetDown(Node * value) { down = value; }
    Node * GetSub() const { return sub; }
    bool IsNextUp() const { return up; }
    void NextUp() { up = true; }
    wchar_t GetVal() const { return val; }
    Symbol * GetSym() const { return sym; }
    TransCode GetTransitionCode() const { return code; }
    void SetTransitionCode(TransCode value) { code = value; }
    BitSet const & GetSet() const { return set; }
    void SetSet(BitSet const & value) { set = value; }
    size_t GetLine() const { return line; }
    void SetLine(size_t value) { line = value; }
    State * GetState() const { return state; }
    void SetState(State * value) { state = value; }

private:
	size_t      id;			// node number
	Kind        typ;		// t, nt, wt, chr, clas, any, eps, sem, sync, alt, iter, opt, rslv
	Node        *next;		// to successor node
	Node        *down;		// alt: to next alternative
	Node        *sub;		// alt, iter, opt: to first node of substructure
	bool        up;			// true: "next" leads to successor in enclosing structure
	Symbol      *sym;		// nt, t, wt: symbol represented by this node
	wchar_t     val;		// chr:  ordinal character value
						    // clas: index of character class
	TransCode   code;		// chr, clas: transition code
	BitSet      set;		// any, sync: the set represented by this node
	size_t      line;		// source text line number of item in this node
	State       * state;    // DFA state corresponding to this node
							// (only used in DFA.ConvertToStates)
	Position    pos;		// nt, t, wt: pos of actual attributes
	                        // sem:       pos of semantic action in source text
						    // rslv:       pos of resolver in source text
}; 

} // namespace Coco
