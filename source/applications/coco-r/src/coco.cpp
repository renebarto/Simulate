/*-------------------------------------------------------------------------
Compiler Generator Coco/R 2016 based on 

Coco/R,
    Copyright (c) 1990, 2004 Hanspeter Moessenboeck, University of Linz
    extended by M. Loeberbauer & A. Woess, Univ. of Linz
    ported to C++ by Csaba Balazs, University of Szeged
    with improvements by Pat Terry, Rhodes University

    This program is free software; you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by the
    Free Software Foundation; either version 2, or (at your option) any
    later version.

    This program is distributed in the hope that it will be useful, but
    WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
    or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    for more details.

    You should have received a copy of the GNU General Public License along
    with this program; if not, write to the Free Software Foundation, Inc.,
    59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

    As an exception, it is allowed to write an extension of Coco/R that is
    used as a plugin in non-free software.

    If not otherwise stated, any source code generated by Coco/R (other than
    Coco/R itself) does not fall under the GNU General Public License.

Due to some bugs and code quality, I've rewritten the code to suit my needs.

Copyright (c) 2016 Rene Barto

-------------------------------------------------------------------------*/

#include "coco.h"
#include "Scanner.h"
#include "core/String.h"

using namespace Coco;
using namespace String;

wchar_t * Coco::String::Create(const wchar_t *value)
{
    return coco_string_create(value);
}

wchar_t * Coco::String::Create(const wchar_t *value, int startIndex)
{
    return coco_string_create(value, startIndex);
}

wchar_t * Coco::String::Create(const wchar_t *value, int startIndex, int length)
{
    return coco_string_create(value, startIndex, length);
}

wchar_t * Coco::String::Create(std::string const & value)
{
    std::wstring valueW = Core::String::ToWString(value);
    return coco_string_create(valueW.c_str());
}

wchar_t * Coco::String::Create(std::string const & value, int startIndex)
{
    std::wstring valueW = Core::String::ToWString(value);
    return coco_string_create(valueW.c_str(), startIndex);
}

wchar_t * Coco::String::Create(std::string const & value, int startIndex, int length)
{
    std::wstring valueW = Core::String::ToWString(value);
    return coco_string_create(valueW.c_str(), startIndex, length);
}

wchar_t * Coco::String::Create(std::wstring const & value)
{
    return coco_string_create(value.c_str());
}

wchar_t * Coco::String::Create(std::wstring const & value, int startIndex)
{
    return coco_string_create(value.c_str(), startIndex);
}

wchar_t * Coco::String::Create(std::wstring const & value, int startIndex, int length)
{
    return coco_string_create(value.c_str(), startIndex, length);
}

wchar_t * Coco::String::CreateAppend(wchar_t const * data1, wchar_t const * data2)
{
    return coco_string_create_append(data1, data2);
}

wchar_t * Coco::String::CreateAppend(wchar_t const * data, wchar_t const value)
{
    return coco_string_create_append(data, value);
}

wchar_t * Coco::String::CreateAppend(std::string const & data1, std::string const & data2)
{
    std::wstring data1W = Core::String::ToWString(data1);
    std::wstring data2W = Core::String::ToWString(data2);
    return coco_string_create_append(data1W.c_str(), data2W.c_str());
}

wchar_t * Coco::String::CreateAppend(std::string const & data, char const value)
{
    std::wstring dataW = Core::String::ToWString(data);
    return coco_string_create_append(dataW.c_str(), wchar_t(value));
}

wchar_t * Coco::String::CreateAppend(std::wstring const & data1, std::wstring const & data2)
{
    return coco_string_create_append(data1.c_str(), data2.c_str());
}

wchar_t * Coco::String::CreateAppend(std::wstring const & data, wchar_t const value)
{
    return coco_string_create_append(data.c_str(), value);
}

size_t Coco::String::LastIndexOf(wchar_t const * data, wchar_t const value)
{
    return coco_string_lastindexof(data, value);
}

size_t Coco::String::LastIndexOf(std::string const & data, char const value)
{
    std::wstring dataW = Core::String::ToWString(data);
    return coco_string_lastindexof(dataW.c_str(), wchar_t(value));
}

size_t Coco::String::LastIndexOf(std::wstring const & data, wchar_t const value)
{
    return coco_string_lastindexof(data.c_str(), value);
}

char * Coco::String::CreateChar(wchar_t const * value)
{
    return coco_string_create_char(value);
}

char * Coco::String::CreateChar(std::string const & value)
{
    std::wstring valueW = Core::String::ToWString(value);
    return coco_string_create_char(valueW.c_str());
}

char * Coco::String::CreateChar(std::wstring const & value)
{
    return coco_string_create_char(value.c_str());
}

void  Coco::String::Delete(wchar_t * &data)
{
    delete[] data;
    data = nullptr;
}

void  Coco::String::Delete(char * &data)
{
    delete[] data;
    data = nullptr;
}
