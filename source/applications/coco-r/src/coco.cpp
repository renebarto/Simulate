/*-------------------------------------------------------------------------
Compiler Generator Coco/R 2016 based on 

Coco/R,
    Copyright (c) 1990, 2004 Hanspeter Moessenboeck, University of Linz
    extended by M. Loeberbauer & A. Woess, Univ. of Linz
    ported to C++ by Csaba Balazs, University of Szeged
    with improvements by Pat Terry, Rhodes University

    This program is free software; you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by the
    Free Software Foundation; either version 2, or (at your option) any
    later version.

    This program is distributed in the hope that it will be useful, but
    WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
    or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    for more details.

    You should have received a copy of the GNU General Public License along
    with this program; if not, write to the Free Software Foundation, Inc.,
    59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

    As an exception, it is allowed to write an extension of Coco/R that is
    used as a plugin in non-free software.

    If not otherwise stated, any source code generated by Coco/R (other than
    Coco/R itself) does not fall under the GNU General Public License.

Due to some bugs and code quality, I've rewritten the code to suit my needs.

Copyright (c) 2016 Rene Barto

-------------------------------------------------------------------------*/

#include "coco.h"
#include "Scanner.h"
#include "core/String.h"

using namespace Coco;
using namespace String;

//wchar_t * Coco::String::Create(const wchar_t *value)
//{
//    return coco_string_create(value);
//}
//
//wchar_t * Coco::String::Create(const wchar_t *value, int startIndex)
//{
//    return coco_string_create(value, startIndex);
//}
//
//wchar_t * Coco::String::Create(const wchar_t *value, int startIndex, int length)
//{
//    return coco_string_create(value, startIndex, length);
//}

std::string Coco::String::Create(std::string const & value)
{
    return value;
}

std::string Coco::String::Create(std::string const & value, size_t startIndex)
{
    return value.substr(startIndex);
}

std::string Coco::String::Create(std::string const & value, size_t startIndex, size_t length)
{
    return value.substr(startIndex, length);
}

std::wstring Coco::String::Create(std::wstring const & value)
{
    return value;
}

std::wstring Coco::String::Create(std::wstring const & value, size_t startIndex)
{
    return value.substr(startIndex);
}

std::wstring Coco::String::Create(std::wstring const & value, size_t startIndex, size_t length)
{
    return value.substr(startIndex, length);
}

//wchar_t * Coco::String::CreateAppend(wchar_t const * data1, wchar_t const * data2)
//{
//    return coco_string_create_append(data1, data2);
//}
//
//wchar_t * Coco::String::CreateAppend(wchar_t const * data, wchar_t const value)
//{
//    return coco_string_create_append(data, value);
//}
//
std::string Coco::String::CreateAppend(std::string const & data1, std::string const & data2)
{
    return data1 + data2;
}

std::string Coco::String::CreateAppend(std::string const & data, char const value)
{
    return data + value;
}

std::wstring Coco::String::CreateAppend(std::wstring const & data1, std::wstring const & data2)
{
    return data1 + data2;
}

std::wstring Coco::String::CreateAppend(std::wstring const & data, wchar_t const value)
{
    return data + value;
}

std::wstring Coco::String::CreateUpper(std::wstring const & data)
{
	if (data.empty())
        return data;

    size_t dataLen = data.length();

	std::wstring newData;

	for (int i = 0; i < dataLen; i++)
    {
		wchar_t ch = data[i];
		if ((L'a' <= ch) && (ch <= L'z'))
        {
			ch = ch - (L'a' - L'A');
		}
        newData += ch;
	}

	return newData;
}

std::wstring Coco::String::CreateLower(std::wstring const & data)
{
	if (data.empty())
        return data;

	return Coco::String::CreateLower(data, 0, data.length());
}

std::wstring Coco::String::CreateLower(std::wstring const & data, size_t startIndex, size_t dataLen)
{
	if (data.empty())
        return data;

	std::wstring newData;

	for (int i = 0; i < dataLen; i++)
    {
		wchar_t ch = data[startIndex + i];
		if ((L'A' <= ch) && (ch <= L'Z'))
        {
			ch = ch - (L'A' - L'a');
		}
        newData += ch;
	}
	return newData;
}

//size_t Coco::String::LastIndexOf(wchar_t const * data, wchar_t const value)
//{
//    return coco_string_lastindexof(data, value);
//}

size_t Coco::String::LastIndexOf(std::string const & data, char const value)
{
    return data.find_last_of(value);
}

size_t Coco::String::LastIndexOf(std::wstring const & data, wchar_t const value)
{
    return data.find_last_of(value);
}

size_t Coco::String::IndexOf(std::string const & data, char const value)
{
    return data.find_first_of(value);
}

size_t Coco::String::IndexOf(std::wstring const & data, wchar_t const value)
{
    return data.find_first_of(value);
}

size_t Coco::String::IndexOf(std::string const & data, size_t startIndex, char const value)
{
    return data.find_first_of(value, startIndex);
}

size_t Coco::String::IndexOf(std::wstring const & data, size_t startIndex, wchar_t const value)
{
    return data.find_first_of(value, startIndex);
}

//char * Coco::String::CreateChar(wchar_t const * value)
//{
//    return coco_string_create_char(value);
//}
//
//char * Coco::String::CreateChar(std::string const & value)
//{
//    std::wstring valueW = Core::String::ToWString(value);
//    return coco_string_create_char(valueW.c_str());
//}
//
//char * Coco::String::CreateChar(std::wstring const & value)
//{
//    return coco_string_create_char(value.c_str());
//}

//void Coco::String::Delete(wchar_t * &data)
//{
//    delete[] data;
//    data = nullptr;
//}
//
//void Coco::String::Delete(char * &data)
//{
//    delete[] data;
//    data = nullptr;
//}
//
void Coco::String::Merge(std::wstring & target, std::wstring const & appendix)
{
	if (appendix.empty())
        return;
    target = CreateAppend(target, appendix);
}

bool Coco::String::Equal(std::wstring const & data1, std::wstring const & data2)
{
	return data1 == data2;
}

int Coco::String::CompareTo(std::wstring const & data1, std::wstring const & data2)
{
	return data1.compare(data2);
}

int Coco::String::Hash(std::wstring const & data)
{
	int h = 0;
	if (data.empty())
        return 0;
    wchar_t const * ptr = data.data();
	while (*ptr != 0)
    {
		h = (h * 7) ^ *ptr;
		++ptr;
	}
	if (h < 0)
        h = -h;
	return h;
}
