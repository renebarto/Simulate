/*-------------------------------------------------------------------------
Compiler Generator Coco/R 2016 based on 

Coco/R,
    Copyright (c) 1990, 2004 Hanspeter Moessenboeck, University of Linz
    extended by M. Loeberbauer & A. Woess, Univ. of Linz
    ported to C++ by Csaba Balazs, University of Szeged
    with improvements by Pat Terry, Rhodes University

    This program is free software; you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by the
    Free Software Foundation; either version 2, or (at your option) any
    later version.

    This program is distributed in the hope that it will be useful, but
    WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
    or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    for more details.

    You should have received a copy of the GNU General Public License along
    with this program; if not, write to the Free Software Foundation, Inc.,
    59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

    As an exception, it is allowed to write an extension of Coco/R that is
    used as a plugin in non-free software.

    If not otherwise stated, any source code generated by Coco/R (other than
    Coco/R itself) does not fall under the GNU General Public License.

Due to some bugs and code quality, I've rewritten the code to suit my needs.

Copyright (c) 2016 Rene Barto

-------------------------------------------------------------------------*/
/*-------------------------------------------------------------------------
  Trace output options
  0 | A: prints the states of the scanner automaton
  1 | F: prints the First and Follow sets of all nonterminals
  2 | G: prints the syntax graph of the productions
  3 | I: traces the computation of the First sets
  4 | J: prints the sets associated with ANYs and synchronisation sets
  6 | S: prints the symbol table (terminals, nonterminals, pragmas)
  7 | X: prints a cross reference list of all syntax symbols
  8 | P: prints statistics about the Coco run

  Trace output can be switched on by the pragma
    $ { digit | letter }
  in the attributed grammar or as a command-line option
  -------------------------------------------------------------------------*/

#include "osal/console.h"
#include "core/ConsoleLogger.h"
#include "core/DefaultLogger.h"
#include "core/String.h"
#include "CommandLineOptionsParser.h"
#include "coco.h"
#include "Scanner.h"
#include "Parser.h"
#include "Tab.h"

using namespace Coco;

int wmain(int argc, wchar_t const * const argv[])
{
    OSAL::Console console;

    Core::ConsoleLogger logger(Core::TheLogger(), console);

    CommandLineOptionsParser cmdLineParser;
    std::wstring applicationName = argv[0];

    try
    {
        cmdLineParser.Parse(argc, argv);
    }
    catch (const Core::Exception & e)
    {
        console << fgcolor(OSAL::ConsoleColor::Red) << "Exception: " << e.what() << std::endl;
        cmdLineParser.ShowHelp();
        exit(1);
    }

    if ((cmdLineParser.NumNonOptions() != 1) || (cmdLineParser.inputFile.empty()))
    {
        console << fgcolor(OSAL::ConsoleColor::Red) << "No or too many input files specified." << std::endl;
        cmdLineParser.ShowHelp();
        exit(1);
    }

    int result = 0;

	size_t pos = Coco::String::LastIndexOf(cmdLineParser.inputFile, '/');
	if (pos == std::string::npos) pos = Coco::String::LastIndexOf(cmdLineParser.inputFile, '\\');
	std::string file = cmdLineParser.inputFile;
	std::string srcDir = Coco::String::Create(cmdLineParser.inputFile, 0, pos + 1);

	Coco::Scanner *scanner = new Coco::Scanner(file);
	Coco::Parser  *parser  = new Coco::Parser(scanner);

	std::string traceFileName = Coco::String::CreateAppend(srcDir, "trace.txt");

	if ((parser->trace = fopen(traceFileName.c_str(), "w")) == nullptr) {
		std::cout << "-- could not open " << traceFileName << std::endl;
		exit(1);
	}

	parser->tab  = new Coco::Tab(parser);
	parser->dfa  = new Coco::DFA(parser);
	parser->pgen = new Coco::ParserGen(parser);

	parser->tab->srcName  = cmdLineParser.inputFile;
	parser->tab->srcDir   = srcDir;
	parser->tab->nsName   = !cmdLineParser.namespaceName.empty() ? cmdLineParser.namespaceName : "";
	parser->tab->frameDir = cmdLineParser.frameFilesDirectory;
	parser->tab->outDir   = !cmdLineParser.outputDirectory.empty() ? cmdLineParser.outputDirectory : cmdLineParser.inputFile;
	parser->tab->emitLines = cmdLineParser.emitLineNumbers;

	if (!cmdLineParser.traceString.empty()) parser->tab->SetDDT(Core::String::ToWString(cmdLineParser.traceString));

	parser->Parse();

	fclose(parser->trace);

	// obtain the FileSize
	parser->trace = fopen(traceFileName.c_str(), "r");
	fseek(parser->trace, 0, SEEK_END);
	long fileSize = ftell(parser->trace);
	fclose(parser->trace);
	if (fileSize == 0)
    {
		remove(traceFileName.c_str());
	}
    else
    {
		std::cout << "trace output is in " << traceFileName << std::endl;
	}

	std::cout << parser->errors->count << " errors detected" << std::endl;
	if (parser->errors->count != 0)
    {
		exit(1);
	}

	delete parser->pgen;
	delete parser->dfa;
	delete parser->tab;
	delete parser;
	delete scanner;

    return result;
}
