/*-------------------------------------------------------------------------
Compiler Generator Coco/R,
Copyright (c) 1990, 2004 Hanspeter Moessenboeck, University of Linz
extended by M. Loeberbauer & A. Woess, Univ. of Linz
ported to C++ by Csaba Balazs, University of Szeged
with improvements by Pat Terry, Rhodes University

This program is free software; you can redistribute it and/or modify it 
under the terms of the GNU General Public License as published by the 
Free Software Foundation; either version 2, or (at your option) any 
later version.

This program is distributed in the hope that it will be useful, but 
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License 
for more details.

You should have received a copy of the GNU General Public License along 
with this program; if not, write to the Free Software Foundation, Inc., 
59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

As an exception, it is allowed to write an extension of Coco/R that is
used as a plugin in non-free software.

If not otherwise stated, any source code generated by Coco/R (other than 
Coco/R itself) does not fall under the GNU General Public License.
-------------------------------------------------------------------------*/

#include <memory.h>
#include <stdio.h>
#include "BitSet.h"

namespace Coco
{

inline size_t BitsToBytes(size_t bits)
{
    return (bits + 7) >> 3;
}

BitSet::BitSet(size_t length, const bool defaultValue)
    : count(length)
    , data(BitsToBytes(length))
{
    SetAll(defaultValue);
}

BitSet::BitSet(BitSet const & other) 
    : count(other.count)
    , data(other.data)
{
}

BitSet::~BitSet()
{
}

size_t BitSet::Count() const
{
	return count;
}

bool BitSet::Get(size_t index) const
{
    if (index >= count)
        throw std::invalid_argument("Index out of range");
	return (data[(index >> 3)] & (1 << (index & 7))) != 0;
}

void BitSet::Set(size_t index, const bool value)
{
	if (value)
    {
		data[(index >> 3)] |= (1 << (index & 7));
	} 
    else 
    {
		unsigned char mask = 0xFF;
		mask ^= (1 << (index & 7));
		data[(index >> 3)] &= mask;
	}
}

void BitSet::SetAll(const bool value)
{
    std::fill(data.begin(), data.end(), value ? 0xFF : 0x00);
}


void BitSet::Not()
{
	for (size_t i = 0; i < BitsToBytes(count); ++i)
    {
		data[i] ^= 0xFF;
	}
}

void BitSet::And(BitSet const & value)
{
    if (count != value.count)
        throw std::invalid_argument("Bit sets must be same size");
	for (size_t i = 0; i < BitsToBytes(count); ++i)
    {
		data[i] = (data[i] & value.data[i]);
	}
}

void BitSet::Or(BitSet const & value)
{
    if (count != value.count)
        throw std::invalid_argument("Bit sets must be same size");
	for (size_t i = 0; i < BitsToBytes(count); ++i)
    {
		data[i] = (data[i] | value.data[i]);
	}
}

void BitSet::Xor(BitSet const & value)
{
    if (count != value.count)
        throw std::invalid_argument("Bit sets must be same size");
	for (size_t i = 0; i < BitsToBytes(count); ++i)
    {
		data[i] = (data[i] ^ value.data[i]);
	}
}

BitSet BitSet::Clone() const
{
	return BitSet(*this);
}

bool BitSet::Equal(BitSet const & other) const
{
	if (count != other.count)
        throw std::invalid_argument("Bit sets must be same size");
	for (size_t i = 0; i < BitsToBytes(count); ++i)
    {
		if (data[i] != other.data[i])
        {
			return false;
		}
	}
	return true;
}

bool BitSet::Overlaps(BitSet const & other) const
{
	if (count != other.count)
        throw std::invalid_argument("Bit sets must be same size");
	for (size_t i = 0; i < BitsToBytes(count); ++i)
    {
		if (data[i] & other.data[i])
        {
			return true;
		}
	}
	return false;
}

BitSet & BitSet::operator = (BitSet const & other)
{
	if (&other != this)
    {
		count  = other.count;
		data = other.data;
	}
	return *this;
}

} // namespace Coco
