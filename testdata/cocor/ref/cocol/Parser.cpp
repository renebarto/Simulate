/*----------------------------------------------------------------------
Compiler Generator Coco/R,
Copyright (c) 1990, 2004 Hanspeter Moessenboeck, University of Linz
extended by M. Loeberbauer & A. Woess, Univ. of Linz
ported to C++ by Csaba Balazs, University of Szeged
with improvements by Pat Terry, Rhodes University

This program is free software; you can redistribute it and/or modify it 
under the terms of the GNU General Public License as published by the 
Free Software Foundation; either version 2, or (at your option) any 
later version.

This program is distributed in the hope that it will be useful, but 
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License 
for more details.

You should have received a copy of the GNU General Public License along 
with this program; if not, write to the Free Software Foundation, Inc., 
59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

As an exception, it is allowed to write an extension of Coco/R that is
used as a plugin in non-free software.

If not otherwise stated, any source code generated by Coco/R (other than 
Coco/R itself) does not fall under the GNU General Public License.
-----------------------------------------------------------------------*/


#include <wchar.h>
#include "Parser.h"
#include "Scanner.h"


namespace Assembler {


void Parser::SynErr(int n) {
	if (errDist >= minErrDist) errors->SynErr(la->line, la->col, n);
	errDist = 0;
}

void Parser::SemErr(const wchar_t* msg) {
	if (errDist >= minErrDist) errors->Error(t->line, t->col, msg);
	errDist = 0;
}

void Parser::Get() {
	for (;;) {
		t = la;
		la = scanner->Scan();
		if (la->kind <= maxT) { ++errDist; break; }

		if (dummyToken != t) {
			dummyToken->kind = t->kind;
			dummyToken->pos = t->pos;
			dummyToken->col = t->col;
			dummyToken->line = t->line;
			dummyToken->next = NULL;
			coco_string_delete(dummyToken->val);
			dummyToken->val = coco_string_create(t->val);
			t = dummyToken;
		}
		la = t;
	}
}

void Parser::Expect(int n) {
	if (la->kind==n) Get(); else { SynErr(n); }
}

void Parser::ExpectWeak(int n, int follow) {
	if (la->kind == n) Get();
	else {
		SynErr(n);
		while (!StartOf(follow)) Get();
	}
}

bool Parser::WeakSeparator(int n, int syFol, int repFol) {
	if (la->kind == n) {Get(); return true;}
	else if (StartOf(repFol)) {return false;}
	else {
		SynErr(n);
		while (!(StartOf(syFol) || StartOf(repFol) || StartOf(0))) {
			Get();
		}
		return StartOf(syFol);
	}
}

void Parser::Cocol() {
		Expect(4 /* "COMPILER" */);
		Goal();
		if (la->kind == 7 /* "CHARACTERS" */) {
			Characters();
		}
		if (la->kind == 16 /* "IGNORE" */) {
			Ignorable();
		}
		if (la->kind == 17 /* "TOKENS" */) {
			Tokens();
		}
		Productions();
		Expect(5 /* "END" */);
		Goal();
		Expect(6 /* "." */);
}

void Parser::Goal() {
		Expect(_identifier);
}

void Parser::Characters() {
		Expect(7 /* "CHARACTERS" */);
		while (la->kind == _identifier) {
			NamedCharSet();
		}
}

void Parser::Ignorable() {
		Expect(16 /* "IGNORE" */);
		CharacterSet();
}

void Parser::Tokens() {
		Expect(17 /* "TOKENS" */);
		while (la->kind == _identifier) {
			Token();
		}
}

void Parser::Productions() {
		Expect(24 /* "PRODUCTIONS" */);
		while (la->kind == _identifier) {
			Production();
		}
}

void Parser::NamedCharSet() {
		SetIdent();
		Expect(8 /* "=" */);
		CharacterSet();
		Expect(6 /* "." */);
}

void Parser::SetIdent() {
		Expect(_identifier);
}

void Parser::CharacterSet() {
		SimpleSet();
		while (la->kind == 9 /* "+" */ || la->kind == 10 /* "-" */) {
			if (la->kind == 9 /* "+" */) {
				Get();
				SimpleSet();
			} else {
				Get();
				SimpleSet();
			}
		}
}

void Parser::SimpleSet() {
		if (la->kind == _identifier) {
			SetIdent();
		} else if (la->kind == _string) {
			Get();
		} else if (la->kind == 13 /* "CHR" */) {
			SingleChar();
			if (la->kind == 11 /* ".." */) {
				Get();
				SingleChar();
			}
		} else if (la->kind == 12 /* "ANY" */) {
			Get();
		} else SynErr(26);
}

void Parser::SingleChar() {
		Expect(13 /* "CHR" */);
		Expect(14 /* "(" */);
		Expect(_number);
		Expect(15 /* ")" */);
}

void Parser::Token() {
		TokenIdent();
		Expect(8 /* "=" */);
		TokenExpr();
		Expect(6 /* "." */);
}

void Parser::TokenIdent() {
		Expect(_identifier);
}

void Parser::TokenExpr() {
		TokenTerm();
		while (la->kind == 18 /* "|" */) {
			Get();
			TokenTerm();
		}
}

void Parser::TokenTerm() {
		TokenFactor();
		while (StartOf(1)) {
			TokenFactor();
		}
		if (la->kind == 19 /* "CONTEXT" */) {
			Get();
			Expect(14 /* "(" */);
			TokenExpr();
			Expect(15 /* ")" */);
		}
}

void Parser::TokenFactor() {
		if (la->kind == _identifier || la->kind == _string) {
			TokenSymbol();
		} else if (la->kind == 14 /* "(" */) {
			Get();
			TokenExpr();
			Expect(15 /* ")" */);
		} else if (la->kind == 20 /* "[" */) {
			Get();
			TokenExpr();
			Expect(21 /* "]" */);
		} else if (la->kind == 22 /* "{" */) {
			Get();
			TokenExpr();
			Expect(23 /* "}" */);
		} else SynErr(27);
}

void Parser::TokenSymbol() {
		if (la->kind == _identifier) {
			SetIdent();
		} else if (la->kind == _string) {
			Get();
		} else SynErr(28);
}

void Parser::Production() {
		NonTerminal();
		Expect(8 /* "=" */);
		Expression();
		Expect(6 /* "." */);
}

void Parser::NonTerminal() {
		Expect(_identifier);
}

void Parser::Expression() {
		Term();
		while (la->kind == 18 /* "|" */) {
			Get();
			Term();
		}
}

void Parser::Term() {
		Factor();
		while (StartOf(1)) {
			Factor();
		}
}

void Parser::Factor() {
		if (la->kind == _identifier || la->kind == _string) {
			Symbol();
		} else if (la->kind == 14 /* "(" */) {
			Get();
			Expression();
			Expect(15 /* ")" */);
		} else if (la->kind == 20 /* "[" */) {
			Get();
			Expression();
			Expect(21 /* "]" */);
		} else if (la->kind == 22 /* "{" */) {
			Get();
			Expression();
			Expect(23 /* "}" */);
		} else SynErr(29);
}

void Parser::Symbol() {
		if (la->kind == _string) {
			Get();
		} else if (la->kind == _identifier) {
			NonTerminal();
		} else if (la->kind == _identifier) {
			TokenIdent();
		} else SynErr(30);
}




// If the user declared a method Init and a mehtod Destroy they should
// be called in the contructur and the destructor respctively.
//
// The following templates are used to recognize if the user declared
// the methods Init and Destroy.

template<typename T>
struct ParserInitExistsRecognizer {
	template<typename U, void (U::*)() = &U::Init>
	struct ExistsIfInitIsDefinedMarker{};

	struct InitIsMissingType {
		char dummy1;
	};
	
	struct InitExistsType {
		char dummy1; char dummy2;
	};

	// exists always
	template<typename U>
	static InitIsMissingType is_here(...);

	// exist only if ExistsIfInitIsDefinedMarker is defined
	template<typename U>
	static InitExistsType is_here(ExistsIfInitIsDefinedMarker<U>*);

	enum { InitExists = (sizeof(is_here<T>(NULL)) == sizeof(InitExistsType)) };
};

template<typename T>
struct ParserDestroyExistsRecognizer {
	template<typename U, void (U::*)() = &U::Destroy>
	struct ExistsIfDestroyIsDefinedMarker{};

	struct DestroyIsMissingType {
		char dummy1;
	};
	
	struct DestroyExistsType {
		char dummy1; char dummy2;
	};

	// exists always
	template<typename U>
	static DestroyIsMissingType is_here(...);

	// exist only if ExistsIfDestroyIsDefinedMarker is defined
	template<typename U>
	static DestroyExistsType is_here(ExistsIfDestroyIsDefinedMarker<U>*);

	enum { DestroyExists = (sizeof(is_here<T>(NULL)) == sizeof(DestroyExistsType)) };
};

// The folloing templates are used to call the Init and Destroy methods if they exist.

// Generic case of the ParserInitCaller, gets used if the Init method is missing
template<typename T, bool = ParserInitExistsRecognizer<T>::InitExists>
struct ParserInitCaller {
	static void CallInit(T *t) {
		// nothing to do
	}
};

// True case of the ParserInitCaller, gets used if the Init method exists
template<typename T>
struct ParserInitCaller<T, true> {
	static void CallInit(T *t) {
		t->Init();
	}
};

// Generic case of the ParserDestroyCaller, gets used if the Destroy method is missing
template<typename T, bool = ParserDestroyExistsRecognizer<T>::DestroyExists>
struct ParserDestroyCaller {
	static void CallDestroy(T *t) {
		// nothing to do
	}
};

// True case of the ParserDestroyCaller, gets used if the Destroy method exists
template<typename T>
struct ParserDestroyCaller<T, true> {
	static void CallDestroy(T *t) {
		t->Destroy();
	}
};

void Parser::Parse() {
	t = NULL;
	la = dummyToken = new Token();
	la->val = coco_string_create(L"Dummy Token");
	Get();
	Cocol();
	Expect(0);
}

Parser::Parser(Scanner *scanner) {
	maxT = 25;

	ParserInitCaller<Parser>::CallInit(this);
	dummyToken = NULL;
	t = la = NULL;
	minErrDist = 2;
	errDist = minErrDist;
	this->scanner = scanner;
	errors = new Errors();
}

bool Parser::StartOf(int s) {
	const bool T = true;
	const bool x = false;

	static bool set[2][27] = {
		{T,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x},
		{x,T,T,x, x,x,x,x, x,x,x,x, x,x,T,x, x,x,x,x, T,x,T,x, x,x,x}
	};



	return set[s][la->kind];
}

Parser::~Parser() {
	ParserDestroyCaller<Parser>::CallDestroy(this);
	delete errors;
	delete dummyToken;
}

Errors::Errors() {
	count = 0;
}

void Errors::SynErr(int line, int col, int n) {
	wchar_t* s;
	switch (n) {
			case 0: s = coco_string_create(L"EOF expected"); break;
			case 1: s = coco_string_create(L"identifier expected"); break;
			case 2: s = coco_string_create(L"string expected"); break;
			case 3: s = coco_string_create(L"number expected"); break;
			case 4: s = coco_string_create(L"\"COMPILER\" expected"); break;
			case 5: s = coco_string_create(L"\"END\" expected"); break;
			case 6: s = coco_string_create(L"\".\" expected"); break;
			case 7: s = coco_string_create(L"\"CHARACTERS\" expected"); break;
			case 8: s = coco_string_create(L"\"=\" expected"); break;
			case 9: s = coco_string_create(L"\"+\" expected"); break;
			case 10: s = coco_string_create(L"\"-\" expected"); break;
			case 11: s = coco_string_create(L"\"..\" expected"); break;
			case 12: s = coco_string_create(L"\"ANY\" expected"); break;
			case 13: s = coco_string_create(L"\"CHR\" expected"); break;
			case 14: s = coco_string_create(L"\"(\" expected"); break;
			case 15: s = coco_string_create(L"\")\" expected"); break;
			case 16: s = coco_string_create(L"\"IGNORE\" expected"); break;
			case 17: s = coco_string_create(L"\"TOKENS\" expected"); break;
			case 18: s = coco_string_create(L"\"|\" expected"); break;
			case 19: s = coco_string_create(L"\"CONTEXT\" expected"); break;
			case 20: s = coco_string_create(L"\"[\" expected"); break;
			case 21: s = coco_string_create(L"\"]\" expected"); break;
			case 22: s = coco_string_create(L"\"{\" expected"); break;
			case 23: s = coco_string_create(L"\"}\" expected"); break;
			case 24: s = coco_string_create(L"\"PRODUCTIONS\" expected"); break;
			case 25: s = coco_string_create(L"??? expected"); break;
			case 26: s = coco_string_create(L"invalid SimpleSet"); break;
			case 27: s = coco_string_create(L"invalid TokenFactor"); break;
			case 28: s = coco_string_create(L"invalid TokenSymbol"); break;
			case 29: s = coco_string_create(L"invalid Factor"); break;
			case 30: s = coco_string_create(L"invalid Symbol"); break;

		default:
		{
			wchar_t format[20];
			coco_swprintf(format, 20, L"error %d", n);
			s = coco_string_create(format);
		}
		break;
	}
	wprintf(L"-- line %d col %d: %ls\n", line, col, s);
	coco_string_delete(s);
	count++;
}

void Errors::Error(int line, int col, const wchar_t *s) {
	wprintf(L"-- line %d col %d: %ls\n", line, col, s);
	count++;
}

void Errors::Warning(int line, int col, const wchar_t *s) {
	wprintf(L"-- line %d col %d: %ls\n", line, col, s);
}

void Errors::Warning(const wchar_t *s) {
	wprintf(L"%ls\n", s);
}

void Errors::Exception(const wchar_t* s) {
	wprintf(L"%ls", s); 
	exit(1);
}

} // namespace

